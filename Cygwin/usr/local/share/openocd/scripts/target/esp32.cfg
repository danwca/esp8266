
#With no variables set, openocd will configure JTAG for the two cores of the ESP32 and
#will not automatic RTOS detection. This can be be adjusted:

#set ESP32_ONLYCPU 1        # Only configure the PRO CPU
#set ESP32_ONLYCPU 2        # Only configure the APP CPU
#set ESP32_RTOS none        # Disable RTOS support
#set ESP32_RTOS freertos    # Force RTOS to be FreeRTOS

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME esp32
}

if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	set _CPUTAPID 0x120034e5
}

if { [info exists ESP32_RTOS] } {
	set _RTOS "$ESP32_RTOS"
} else {
	set _RTOS "auto"
}

if { [info exists ESP32_ONLYCPU] } {
	set _ONLYCPU $ESP32_ONLYCPU
} else {
	set _ONLYCPU 3
}

proc esp_core_halt { tgt } {
	#We need to disable the watchdogs here.
	#TIMG1 WDT
	$tgt mww 0x3FF5F064 0x50D83AA1
	$tgt mww 0x3FF5F048 0x0
	#TIMG2 WDT
	$tgt mww 0x3FF60064 0x50D83AA1
	$tgt mww 0x3FF60048 0x0
	#RTC WDT
	#ToDo: Figure out how to kill the RTC WDT
}

proc configure_esp32_core { TGT } {
	$TGT configure -event halted [list esp_core_halt $TGT]
}

#Change the name of the CPU taps depending on if it's enabled or not. This way, the user
#gets immediate feedback in the openocd logs.
if { $_ONLYCPU == "1" } {
	set _CPU0NAME cpu0
	set _CPU1NAME ignored
} elseif { $_ONLYCPU == "2" } {
	set _CPU0NAME ignored
	set _CPU1NAME cpu1
} else {
	set _CPU0NAME cpu0
	set _CPU1NAME cpu1
}

#Do add both taps, even if one of the CPUs is disabled.
jtag newtap $_CHIPNAME $_CPU0NAME -irlen 5 -expected-id $_CPUTAPID
jtag newtap $_CHIPNAME $_CPU1NAME -irlen 5 -expected-id $_CPUTAPID
set _TARGETNAME1 $_CHIPNAME.cpu1
set _TARGETNAME2 $_CHIPNAME.cpu0

if { $_ONLYCPU != 2 } {
	if { $_RTOS == "none" } {
		target create $_TARGETNAME2 esp108 -endian little -chain-position $_TARGETNAME2
	} else {
		target create $_TARGETNAME2 esp108 -endian little -chain-position $_TARGETNAME2 -rtos $_RTOS
	}
	configure_esp32_core $_TARGETNAME2
}
if { $_ONLYCPU != 1 } {
	if { $_RTOS == "none" } {
	target create $_TARGETNAME1 esp108 -endian little -chain-position $_TARGETNAME1
	} else {
	target create $_TARGETNAME1 esp108 -endian little -chain-position $_TARGETNAME1 -rtos $_RTOS
	}
	if { $_ONLYCPU != 3 } {
		configure_esp32_core $_TARGETNAME1
	}
}


#Force hw breakpoints. Once we have a memory map, we can also allow software bps.
gdb_breakpoint_override hard
